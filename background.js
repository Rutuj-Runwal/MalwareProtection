const siteadvisorLookup = "https://www.siteadvisor.com/sitereport.html?url=";
const safewebLookup = "https://safeweb.norton.com/report/show?url=";
const urlHaus = "https://malware-filter.gitlab.io/malware-filter/urlhaus-filter-online.txt";
const urlHausBackup = "https://malware-filter.pages.dev/urlhaus-filter-online.txt";
// var siteCheckResult = "https://sitecheck.sucuri.net/results/";
function siteadvisor(domain,sendResponse) {
    let url = siteadvisorLookup + domain;
    let url_t = safewebLookup + domain;
    fetch(url) 
      .then(
        function(response) {
          if (response.status !== 200) {
            console.log('Looks like there was a problem. Status Code: ' +
              response.status);
          }
          else{
            return response.text();
          }}).then(function(html){
            const rating = html.includes("risky");
            sendResponse({status:rating});
        });
}

function scanAllUrls(urldata,sendResponse){
  var fetches = [];
  var finalRes = [];
  console.log(urldata);
  for (let i = 0; i < urldata.length; i++) {
    if(urldata[i]===null){
      finalRes.push(false);
    }
    else if(urldata[i].includes("www.google.com")||urldata[i].includes("maps.google.com") || urldata[i].includes("accounts.google.com") || urldata[i].includes("policies.google.com")){
      finalRes.push(false);
    }
    else{
      fetches.push(
          fetch(siteadvisorLookup + urldata[i])
          .then(
            function(response){
              if(response.status===200){return response.text();}
            })
          .then(function(html){ 
            let rating = html.includes("risky");
            // let rating_sw = html.includes("warning");
            // let rating_oth = html.includes("caution");
            // let rating = (rating_oth||rating_sw);
            finalRes.push(urldata[i]+' '+rating);
          })
        );
    }
  }
  Promise.all(fetches).then(function() {
    sendResponse(finalRes);
  });
}

chrome.runtime.onMessage.addListener(
  function(request,sender,sendResponse) {
    if(request.key!==undefined && request.key==="protection_7#rr"){
        siteadvisor(request.scanIt , sendResponse);
    }
    else{
      var data = request;
      scanAllUrls(data,sendResponse);
    }
    return true;
  }
);

function saveUpdateTime(){
  const tDate = new Date().toLocaleDateString();
  chrome.storage.local.set({run_day:tDate});
}
function performUpdate(){
  try{
  fetch(urlHaus).then(function(response){
    if (response.status !== 200) {
          console.log('Looks like there was a problem. Status Code: ' +
            response.status);
      }
      else{
        return response.text()
      }}).then(function(text){
        const urlData = text.split("\n");
        console.log(urlData);
        var id = 1
        var finalRegexArr = []
        if(urlData.length<=5000){
        urlData.forEach((item) => {
          if(!item.includes("! ") && item.length!=0){
            if(item.includes("$all")){
              item=item.replace('$all','');
            }
              finalRegexArr.push({
                  "id": id++,
                  "priority": 1,
                  "action": {
                      "type": "block"
                  },
                  "condition": {
                      "urlFilter": item,
                      "resourceTypes": [
                          "main_frame",
                          "sub_frame",
                          "script",
                          "xmlhttprequest",
                          "ping",
                          "csp_report",
                          "media",
                          "websocket",
                          "image",
                          "webtransport",
                          "webbundle",
                          "other"
                      ]
                  }
              })
          }
        });
        }else{console.log("dNr Error: Ruleset Limit overflow");}
        if(finalRegexArr.length>0){
          finalRegexArr.forEach((registerRule, index) => {
              let id = index + 1;
              chrome.declarativeNetRequest.updateDynamicRules({
                addRules: [
                  registerRule
                ],
                removeRuleIds: [id],
              });
            });
        }
      }).catch((error) => {
        console.log(error)
      });
  }catch(err){
    console.log("Error");
  }finally{
    fetch(urlHausBackup).then(function(response){
    if (response.status !== 200) {
          console.log('Looks like there was a problem. Status Code: ' +
            response.status);
      }
      else{
        return response.text()
      }}).then(function(text){
        const urlData = text.split("\n");
        console.log(urlData);
        var id = 1
        var finalRegexArr = []
        urlData.forEach((item) => {
          if(!item.includes("! ") && item.length!=0){
            if(item.includes("$all")){
              item=item.replace('$all','');
              console.log(item);
            }
              finalRegexArr.push({
                  "id": id++,
                  "priority": 1,
                  "action": {
                      "type": "block"
                  },
                  "condition": {
                      "urlFilter": item,
                      "resourceTypes": [
                          "main_frame",
                          "sub_frame",
                          "script",
                          "xmlhttprequest",
                          "ping",
                          "csp_report",
                          "media",
                          "websocket",
                          "image",
                          "webtransport",
                          "webbundle",
                          "other"
                      ]
                  }
              })
          }
        });
        finalRegexArr.forEach((registerRule, index) => {
            let id = index + 1;
            chrome.declarativeNetRequest.updateDynamicRules({
              addRules: [
                registerRule
              ],
              removeRuleIds: [id],
            });
          });
      }).catch((error) => {
        console.log(error)
      });
  }
}

try{
chrome.storage.local.get(['run_day'], function(result) {
    let checkerDate = new Date().toLocaleDateString();    
    if(result.run_day===undefined){
      try{
        performUpdate();
      }catch(err){console.log("Error while fetching urlHaus data:E01!");}
      saveUpdateTime();
      console.log("First Update Performed!");
    }
    else if(result.run_day!==checkerDate){
      try{
        performUpdate();
      }catch(err){console.log("Error while fetching urlHaus data: E02!");}
      saveUpdateTime();
      console.log("Updated Successfully!");

    }
  });
}catch(err){
  console.log(err);
}